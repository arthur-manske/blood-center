#!/usr/bin/node

const DonatorMinAge = 16;
const DonatorMaxAge = 69; 

const DonatorMinWeight = 50;

const rl = require('readline-sync'); 
const donatorsArray = [];

const validBloodTypes = ["A", "A+", "A-", "B", "B+", "B-", "AB", "AB+", "AB-", "O", "O+", "O-"];

let donatorNameMaxLength = 0;

function donatorsListHeader()
{
	let nameMsg = "Nome".padEnd(donatorNameMaxLength, ' '); 
	console.log(`${nameMsg} | Idade | Peso | Tipo sanguíneo | Última doação`);
}

function verifyDate(string)
{
	let tokens = string.split('/');
	if (tokens.length !== 3) {
		if (string !== '') {
			console.error('A data possui formato não reconhecido (esperado dd/mm/aaaa).');
		} 

		return false;
	}

	if (tokens[0].length != 2 || tokens[1].length != 2 || tokens[2].length != 4) {
		console.error('A data possui formato não reconhecido (esperado dd/mm/aaaa).');
		return false;
	}

	if (isNaN(Number(tokens[0])) || isNaN(Number(tokens[1])) || isNaN(Number(tokens[2]))) {
		console.error('A data contém caracteres não númericos');
		return false;
	}

	return true;
}

function verifyBloodType(string)
{
	for (let i = 0; i < validBloodTypes.length; ++i) {
		if (string === validBloodTypes[i])
			return true;
	}
	
	if (string !== "") {
		console.log(`O tipo sanguíneo fornecido é inválido`);
	}

	return false;
}

function verifyAge(age)
{
	if (isNaN(age)) {
		return false;
	}

	if (age < DonatorMinAge) {
		console.error(`A idade é inferior ao mínimo de ${DonatorMinAge} anos`);
		return false;
	} else if (age > DonatorMaxAge) {
		console.log(`A idade excede o limite de ${DonatorMinAge} anos`);
		return false;
	}

	return true;
}

function verifyWeight(weight)
{
	if (isNaN(weight))
		return false;

	if (weight < DonatorMinWeight) {
		console.error(`Peso é inferior ao mínimo de ${DonatorMinWeight}kg`);
		return false;
	}

	return true;
}

function appendNewDonator() {
	let name = rl.question("Nome: "); 
	let age = NaN; 
	let weight = NaN; 
	let bloodType = '';
	let lastDonationDate = '';

	while (!verifyAge(age)) {
		age = Number(rl.question('Idade: '));
	}

	if (donatorNameMaxLength < name.length) {
		donatorNameMaxLength = name.length;
	}

	while (!verifyWeight(weight)) { 
		weight = Number(rl.question('Peso: ')); 
	}

	while (!verifyBloodType(bloodType)) {
		bloodType = rl.question('Tipo sanguíneo: ').toUpperCase();
	}
	
	while (!verifyDate(lastDonationDate)) {
		lastDonationDate = rl.question('Última doação (dd/mm/aaaa): ');
	}

	let donator = {
		name:             name,
		age:              age,
		weight:           weight,
		bloodType:        bloodType,
		lastDonationDate: lastDonationDate,
	};

	donatorsArray.push(donator);

	console.log("-----------------------------------------------------");
	console.log("-----       Registro concluído com exito        -----");
	console.log("-----   (pressione enter para voltar ao menu)   -----");
	console.log("-----------------------------------------------------");

}

function printDonator(donator)
{
	let donatorAge       = String(donator.age).padEnd(5, ' ');
	let donatorWeight    = String(donator.weight).padEnd(4, ' '); 
	let donatorBloodType = String(donator.bloodType).padEnd(14, ' ');
	let donatorName      = String(donator.name).padEnd(donatorNameMaxLength, ' ');

	console.log(`${donatorName} | ${donatorAge} | ${donatorWeight} | ${donatorBloodType} | ${donator.lastDonationDate}`);
} 

function searchHeader() 
{
	console.log("-----------------------------------------------------");
	console.log("-----             Resultado da busca            -----");
	console.log("-----------------------------------------------------");
}

function searchFooter(numResults)
{
	console.log("-----------------------------------------------------");
	console.log(`-----   Encontrados ${String(numResults).padEnd(27, ' ')} ----`);
	console.log("-----   (pressione enter para voltar ao menu)   -----");
	console.log("-----------------------------------------------------");
}

function getDonatorsWithBloodType()
{
	let target = '';
	let numResults = 0;
	
	while (!verifyBloodType(target)) {
		target = rl.question('Digite o tipo sanguíneo desejado: ').toUpperCase();
		console.log("-----------------------------------------------------");
	}

	for (let i = 0; i < donatorsArray.length; ++i) {
		if (target === donatorsArray[i].bloodType) {
			if (numResults === 0) {
				searchHeader();
				donatorsListHeader();
			}

			printDonator(donatorsArray[i]);
			numResults++;
		}
	}

	searchFooter(numResults);
}

function getDonatorsUntilDate()
{
	let date = '';
	let numResults = 0;
	let searchFor;
	
	while (!verifyDate(date)) {
		date = rl.question('Digite a data desejada (dd/mm/aaaa): ');
		console.log("-----------------------------------------------------");
	}

	searchFor = date.split('/').reverse().join('');

	for (let i = 0; i < donatorsArray.length; ++i) {
		let donatorDate = donatorsArray[i].lastDonationDate.split('/').reverse().join('');

		if (Number(donatorDate) <= Number(searchFor)) {
			if (numResults === 0) {
				searchHeader();
				donatorsListHeader();
			}

			printDonator(donatorsArray[i]);
			numResults++;
		}
	}

	searchFooter(numResults);
}

function listDonators()
{
	if (donatorsArray.length > 0) {
		donatorsListHeader();
	} 

	for (donator of donatorsArray) {
		printDonator(donator);
	}

	console.log("-----------------------------------------------------");
	console.log("-----   (pressione enter para voltar ao menu)   -----");
	console.log("-----------------------------------------------------");
}

function main() {
	let option;

	console.clear();
	console.log("----- SISTEMA DE REGISTRO DE DOADORES DE SANGUE -----\n");

	while (option !== 5) {
		console.log("-----------------------------------------------------");
		console.log("-----              Menu de opções               -----");
		console.log("-----------------------------------------------------");

		console.log("1. Registrar Doador");
		console.log("2. Listar Doadores");
		console.log("3. Buscar Doadores por Tipo Sanguíneo");
		console.log("4. Buscar Doadores por Data da Última Doação");
		console.log("5. Sair");

		console.log("-----------------------------------------------------\n");

		option = Number(rl.question("Escolha uma opção: "));
		console.clear();

		switch(option) {
		case 1:
			console.log("-----------------------------------------------------");
			console.log("-----          Registro de novo usuário         -----");
			console.log("-----------------------------------------------------");

			appendNewDonator();
			break;
		case 2:
			console.log("-----------------------------------------------------");
			console.log("-----           Listagem de doadores            -----");
			console.log("-----------------------------------------------------");

			listDonators();
			break;
		case 3:
			console.log("-----------------------------------------------------");
			console.log("-----         Pesquisa por tipo sanguíneo       -----");
			console.log("-----------------------------------------------------");

			getDonatorsWithBloodType();
			break;
		case 4:
			console.log("-----------------------------------------------------");
			console.log("-----         Pesquisa por data limite          -----");
			console.log("-----------------------------------------------------");

			getDonatorsUntilDate();
			break;
		case 5:
			return;
		default:
			console.error(`Opção inválida fornecida (enter para continuar).`);
		}

		rl.question('');
		console.clear();
	}
}

main();
